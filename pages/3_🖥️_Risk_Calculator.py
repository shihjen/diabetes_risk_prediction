import streamlit as st
import numpy as np
import pickle

# load the trained models
with open('models/lr.pkl', 'rb') as f:
    lr = pickle.load(f)
with open('models/tree.pkl', 'rb') as f:
    tree = pickle.load(f)
with open('models/rf.pkl', 'rb') as f:
    rf = pickle.load(f)
with open('models/svc.pkl', 'rb') as f:
    svc = pickle.load(f)
with open('models/gbc.pkl', 'rb') as f:
    gbc = pickle.load(f)
with open('models/knn.pkl', 'rb') as f:
    knn = pickle.load(f)

with open('models/scaler.pkl', 'rb') as f:
    scaler = pickle.load(f)
with open('models/imputer.pkl', 'rb') as f:
    knn_imputer = pickle.load(f)

model_option = {'Logistic Regression':lr,
                'Decision Tree': tree,
                'Random Forest': rf,
                'Support Vector Machine': svc,
                'Gradient Boosting': gbc,
                'K Nearest Neighbors': knn}

# Streamlit page configuration
st.set_page_config(
    page_title='Diabetes_Risk_Calculator',
    page_icon=':desktop_computer:',
    layout='wide',
    initial_sidebar_state='expanded'
)


st.title(':desktop_computer: :orange[Diabetes Risk] Calculator')

container = st.container(border=True)
container.markdown('### :one: Please provide the following information for predicting the risk')
container.markdown('### ')

col1, col2 = container.columns(2)
Pregnancies = col1.number_input('Enter number of pregnancies: ', value=1, placeholder='Type a number...')
Age = col2.number_input('Enter your age (years):', value=21.00)

col3, col4 = container.columns(2)
BloodPressure = col3.number_input('Enter your blood pressure:', value=72.00)
SkinThickness = col4.number_input('Enter your skin thickness: ', value=29.00)

col5, col6 = container.columns(2)
Glucose = col5.number_input('Enter your blood glucose levels:', value=122.00)
Insulin = col6.number_input('Enter your insulin level: ', value=155.00)

col7, col8 = container.columns(2)
height = col7.number_input('Enter your height (m):', value=1.65)
weight = col8.number_input('Enter your body weight (kg): ', value=65.00)
BMI = weight / height**2

col9, col10 = container.columns(2)
DiabetesPedigreeFunction = col9.number_input('Enter your diabetes pedigree function values: ', value=0.42)

information = [[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age]]
user_information = np.array(information)
user_information_transformed = scaler.transform(user_information)

container2 = st.container(border=True)
container2.markdown('### :two: Prediction')
container2.markdown('### ')
model = container2.selectbox('Select the model for prediction:', model_option.keys())
container2.markdown('#### Prediction Result:')

prediction = model_option[model].predict(user_information_transformed)
if prediction == 0:
    result = 'Low'
    container2.write('Based on the information provided, the model predicting that your are on :green[{}] risk of developing the diabetes'.format(result))
elif prediction == 1:
    result = 'High'
    container2.write('Based on the information provided, the model predicting that your are on :red[{}] risk of developing the diabetes'.format(result))

container2.write(''' :orange[Disclaimer: Please note that the predictions generated by our application are based on statistical models and 
should not replace professional medical advice. Always consult with a healthcare professional for accurate diagnosis and 
personalized recommendations.]''')
